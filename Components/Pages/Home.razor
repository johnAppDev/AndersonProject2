@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JS

<div class="main">
    <div class="mapHolder" >
        
        <div id = "map"></div>
        
    </div>
    <div class="side-display">
        <div class="container file-upload">
            <InputFile OnChange="@Upload"/>
            <Calendar @ref="calendar"/>
            @if(unprocessedEventInfo != null){
               
                
                <h2>@contextTitle</h2>
                <ul class="data">

                    @foreach(List<ReaderEvent> readerEventList in processedEventInfo){
                        switch(type){
                            case 1:
                                <li>@readerEventList[0].idhash: @readerEventList.Count</li>
                                break;
                            case 2:
                                <li>@readerEventList[0].readerDescription: @readerEventList.Count</li>
                                break;
                        }
                    }
                </ul>
                <div class="data advanced-context">
                    <table>
                        <thead>
                            <th>Time</th>
                            <th>Location</th>
                            <th>Description</th>
                            <th>ID</th>
                            <th>DEVID</th>
                            <th>Machine</th>
                        
                        </thead>
                        <tbody>
                            @foreach(ReaderEvent readerEvent in unprocessedEventInfo){
                                
                                <tr>
                                <td>@DateTime.Parse(readerEvent.time).ToShortDateString()</td>
                                <td>@readerEvent.location</td>
                                <td>@readerEvent.readerDescription</td>
                                <td>@readerEvent.idhash</td>
                                <td>@readerEvent.devid</td>
                                <td>@readerEvent.machine</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

            }
        </div>
        <div class="container data-display">
            <div class="data">
                    <table>
                    <thead>
                        <th>Reader ID</th>
                        <th>Number of Interactions</th>
                    </thead>
                    <tbody>
                    @if(sortedReaders != null){
                        @foreach(List<ReaderEvent> sortedReader in sortedReaders ){
                            <tr>
                                <td><button @onclick="() => displayEvent(sortedReader, 1)">@sortedReader[0].devid@sortedReader[0].machine</button></td>
                                <td>@sortedReader.Count</td>
                            </tr>
                            
                        }
                    }
                    </tbody>
                </table>
            </div>
            <div class="data">
                    <table>
                    <thead>
                        <th>Panel ID</th>
                        <th>Number of Interactions</th>
                    </thead>
                    <tbody>
                    @if(sortedPanels != null){
                        @foreach(List<ReaderEvent> sortedPanel in sortedPanels ){
                            <tr>
                                <td>@sortedPanel[0].devid</td>
                                <td>@sortedPanel.Count</td>
                            </tr>
                            
                        }
                    }
                    </tbody>
                </table>
            </div>
            <div class="data">
                    <table>
                    <thead>
                        <th>User ID</th>
                        <th>Number of Interactions</th>
                    </thead>
                    <tbody>
                    @if(sortedUsers != null){
                        @foreach(List<ReaderEvent> sortedUser in sortedUsers ){
                            <tr>
                                
                                   <td><button @onclick="() => displayEvent(sortedUser, 2)">@sortedUser[0].idhash</button></td>
                                   
                                   
                        
                                <td>@sortedUser.Count</td>
                            </tr>
                            
                        }
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
@code{
    Calendar calendar;
    public int type;
    public string FileName { get; set; } = "";
    public long FileSize { get; set; }
    public string FileType { get; set; } = "";
    public DateTimeOffset LastModified { get; set; }
    public List<ReaderEvent> unprocessedEventInfo;
    public List<ReaderEvent>[] processedEventInfo;
    public string contextTitle = "";
    const int MAX_FILESIZE = 5000 * 1024;
    public List<ReaderEvent> readerEvents = new List<ReaderEvent>();
    Dictionary<string, List<ReaderEvent>> eventDictionary = new Dictionary<string,List<ReaderEvent>>();
    Dictionary<string, List<ReaderEvent>> panelDictionary = new Dictionary<string,List<ReaderEvent>>();
    Dictionary<string, List<ReaderEvent>> userDictionary = new Dictionary<string,List<ReaderEvent>>();
    Dictionary<string, List<ReaderEvent>> timeDictionary = new Dictionary<string, List<ReaderEvent>>();
    Dictionary<string, List<ReaderEvent>> locationDictionary = new Dictionary<string, List<ReaderEvent>>();
    public List<ReaderEvent>[]? sortedReaders;
    public List<ReaderEvent>[]? sortedPanels;
    public List<ReaderEvent>[]? sortedUsers;
    public List<ReaderEvent>[]? sortedTimes;
    public string error = "";
    private static ElementReference myElement;
    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
             await JS.InvokeVoidAsync("createMap", 35.600291735954535, -97.6397232404786, 17);
             
        }
    }
    public void displayReaderInfo(){
               IEnumerable<ReaderEvent> uniqueIds = from readerEvent in readerEvents
                                                                            where readerEvent.devid.Equals(unprocessedEventInfo[0].devid)
                                                                            where readerEvent.machine.Equals(unprocessedEventInfo[0].machine)
                                                                            select readerEvent;
                Dictionary<string, List<ReaderEvent>> uniqueIDDictionary = populateUserDictionary(uniqueIds.ToList<ReaderEvent>());
                Dictionary<string, List<ReaderEvent>> uniqueDateDictionary = populateTimeDictionary(uniqueIds.ToList<ReaderEvent>());
                processedEventInfo = sortDictionaryByCount(uniqueIDDictionary);
                calendar.DateDictionary = uniqueDateDictionary;
                calendar.MostInteractions = sortDictionaryByCount(uniqueDateDictionary)[0].Count;
        }
        public void displayUserInfo(){
              IEnumerable<ReaderEvent> uniqueIds = from readerEvent in readerEvents
                                                                            where readerEvent.idhash.Equals(unprocessedEventInfo[0].idhash)
                                                                            select readerEvent;
                Dictionary<string, List<ReaderEvent>> uniqueReaderDictionary = populateReaderDictionary(uniqueIds.ToList<ReaderEvent>());
                Dictionary<string, List<ReaderEvent>> uniqueDateDictionary = populateTimeDictionary(uniqueIds.ToList<ReaderEvent>());
                processedEventInfo = sortDictionaryByCount(uniqueReaderDictionary);
                
                calendar.DateDictionary = uniqueDateDictionary;
                calendar.MostInteractions = sortDictionaryByCount(uniqueDateDictionary)[0].Count;
        }
    public async Task Upload(InputFileChangeEventArgs e){
       error = "Readers sorted?";
        await FileUploaded(e);
        
        await Task.Run(csvReader);
        eventDictionary= populateReaderDictionary(readerEvents);
        populatePanelDictionary(readerEvents);
        userDictionary = populateUserDictionary(readerEvents);
        
        sortedReaders = sortDictionaryByCount(eventDictionary);
        sortedPanels = sortDictionaryByCount(panelDictionary);
        sortedUsers = sortDictionaryByCount(userDictionary);
        timeDictionary = populateTimeDictionary(readerEvents);
        sortedTimes = sortDictionaryByCount(timeDictionary);
        calendar.DateDictionary = timeDictionary;
        calendar.MostInteractions =sortedTimes[0].Count;
        await massPlace();
        StateHasChanged();

    }
    public async Task FileUploaded(InputFileChangeEventArgs e){      
        var browserFile = e.File;
        if(browserFile != null){
            Console.WriteLine("File is not null");
             FileSize = browserFile.Size;
            FileType = browserFile.ContentType;
            FileName = browserFile.Name;
            LastModified = browserFile.LastModified;
            StateHasChanged();
            

            try{
                
                 var fileStream = browserFile.OpenReadStream(MAX_FILESIZE);
                 var destinationStream = new FileStream(FileName, FileMode.Create);
                await fileStream.CopyToAsync(destinationStream);
                destinationStream.Close();
            }catch(Exception exception){
                Console.WriteLine(exception);
            }
        }

    }
    public void displayEvent(List<ReaderEvent> readerEvent, int type){
        unprocessedEventInfo = readerEvent;
        this.type = type;
        switch(type){
            case 1: 
                displayReaderInfo();
                contextTitle = unprocessedEventInfo[0].readerDescription;
                
                break;
            case 2:
                contextTitle = unprocessedEventInfo[0].idhash;
                displayUserInfo();
                //display User Info
                break;
        }
        StateHasChanged();
    }
    public List<ReaderEvent>[] sortDictionaryByCount(Dictionary<string, List< ReaderEvent>> dictionary){
       List<ReaderEvent>[] unorderedReader = new List<ReaderEvent>[dictionary.Count];
        List<ReaderEvent> t = new List<ReaderEvent>();
       // List<ReaderEvent>[] orderedReaders = new List<ReaderEvent>[eventDictionary.Count];
       
        int index = 0;
        foreach(KeyValuePair<string, List<ReaderEvent>> readerEvent in dictionary){
            unorderedReader[index] = readerEvent.Value;
            index++;
        }
        
        for(int i = 0; i < unorderedReader.Length; i++){
             for (int j = i + 1; j < unorderedReader.Length; j++) {
                if (unorderedReader[j].Count > unorderedReader[i].Count) {
                    t = unorderedReader[i];
                    unorderedReader[i] = unorderedReader[j];
                    unorderedReader[j] = t;
                }
            }
        }
        return unorderedReader;
       
    }
     
    public void csvReader(){
            try
            {
                StreamReader sr = new StreamReader(FileName);
                sr.ReadLine();
                string? line = sr.ReadLine();
               // List<String> words = new List<string>();
                
                while (line != null)
                {
                    string[] words = line.Split(",");
                    ReaderEvent tempEvent = new ReaderEvent(words[0], words[1], words[2], words[3], words[4], words[5]);
                    readerEvents.Add(tempEvent);
                    line = sr.ReadLine();
                }
                
              
            }catch(Exception exception){
                Console.WriteLine(exception);
            }
           
            
    }
    
    public Dictionary<string, List<ReaderEvent>> populateReaderDictionary(List<ReaderEvent> readerList){
            Dictionary<string, List<ReaderEvent>> eventDictionary = new Dictionary<string, List<ReaderEvent>>();
            
            foreach(ReaderEvent readerEvent in readerList){
                if (!eventDictionary.ContainsKey(readerEvent.devid + readerEvent.machine)){
                    List<ReaderEvent> events = new List<ReaderEvent>();
                    events.Add(readerEvent);
                    eventDictionary.Add(readerEvent.devid +readerEvent.machine, events);
                }else{
                    eventDictionary[readerEvent.devid + readerEvent.machine].Add(readerEvent);
                }
            }
            return eventDictionary;
            
        }
         public  Dictionary<string, List<ReaderEvent>> populateTimeDictionary(List<ReaderEvent> readerList){
            Dictionary<string, List<ReaderEvent>> timeDictionary = new Dictionary<string, List<ReaderEvent>>();
            foreach(ReaderEvent readerEvent in readerList){
                string date = DateTime.Parse(readerEvent.time).ToShortDateString();
                if (!timeDictionary.ContainsKey(date)){
                    List<ReaderEvent> events = new List<ReaderEvent>();
                    events.Add(readerEvent);
                    timeDictionary.Add(date, events);
                }else{
                    timeDictionary[date].Add(readerEvent);
                }
            }
            return timeDictionary;
            
        }
        public void populatePanelDictionary(List<ReaderEvent> readerList){
            
            foreach(ReaderEvent readerEvent in readerList){
                if (!panelDictionary.ContainsKey(readerEvent.machine)){
                    List<ReaderEvent> events = new List<ReaderEvent>();
                    events.Add(readerEvent);
                    panelDictionary.Add(readerEvent.machine, events);
                }else{
                    panelDictionary[readerEvent.machine].Add(readerEvent);
                }
            }
            
        }
        public Dictionary<string, List<ReaderEvent>> populateUserDictionary(List<ReaderEvent> readerList){
            Dictionary<string, List<ReaderEvent>> userDictionary = new Dictionary<string, List<ReaderEvent>>();
            foreach(ReaderEvent readerEvent in readerList){
                if (!userDictionary.ContainsKey(readerEvent.idhash)){
                    List<ReaderEvent> events = new List<ReaderEvent>();
                    events.Add(readerEvent);
                    userDictionary.Add(readerEvent.idhash, events);
                }else{
                    userDictionary[readerEvent.idhash].Add(readerEvent);
                }
            }
            return userDictionary;
            
        }
        //general map functions
        private async Task massPlace(){
            Dictionary<string, List<ReaderEvent>> results = readerEvents
                .GroupBy(p => p.location)
                .ToDictionary(g => g.Key, g => g.ToList());
             locationDictionary = results;
             List<ReaderEvent>[] locationsRanked = sortDictionaryByCount(locationDictionary);
             foreach(List<ReaderEvent> location in locationsRanked){
                await JS.InvokeVoidAsync("massPlace", 35.600291735954535, -97.6397232404786, location[0].location );
                }   
        }
        
    public class ReaderEvent{
        public ReaderEvent(string time, string location, string readerDescription, string idhash, string devid, string machine){
            this.time = time;
            this.location = location;
            this.readerDescription = readerDescription;
            this.idhash = idhash;
            this.devid = devid;
            this.machine = machine;
        }
        public string time;
        public string location;
        public string readerDescription;
        public string idhash;
        public string devid;
        public string machine;
       
    }
}
